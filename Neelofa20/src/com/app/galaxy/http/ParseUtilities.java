package com.app.galaxy.http;import java.io.IOException;import java.io.StringReader;import java.io.UnsupportedEncodingException;import java.net.MalformedURLException;import java.util.ArrayList;import java.util.HashMap;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.client.methods.HttpPost;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.params.BasicHttpParams;import org.apache.http.params.HttpConnectionParams;import org.apache.http.params.HttpParams;import org.apache.http.util.EntityUtils;import org.json.JSONArray;import org.json.JSONObject;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.xml.sax.InputSource;import org.xml.sax.SAXException;import android.content.Context;import android.graphics.Bitmap;import android.util.Log;import android.widget.Toast;import com.app.galaxy.data.AddonData;import com.app.galaxy.data.Categories;import com.app.galaxy.data.CountryData;import com.app.galaxy.data.Details;import com.app.galaxy.data.FanData;import com.app.galaxy.data.FolderDetails;import com.app.galaxy.data.MediaData;import com.app.galaxy.data.NewsData;import com.app.galaxy.data.ShoppingData;import com.app.galaxy.data.SubCategories;import com.app.galaxy.data.ZoneData;import com.app.galaxy.ui.LoginScreen;import com.app.galaxy.ui.news.NewsUpdates;import com.app.galaxy.ui.utility.Utility;public class ParseUtilities {	public static String getXML(String url,Context context){		String line = "";		url=url.replace(" ", "%20");		if(Utility.isOnline(context))		{			try {				HttpParams httpParameters = new BasicHttpParams();				HttpConnectionParams.setConnectionTimeout(httpParameters, 10000);				HttpConnectionParams.setSoTimeout(httpParameters, 10000);				DefaultHttpClient httpClient = new DefaultHttpClient(httpParameters);				HttpPost httpPost = new HttpPost(url);				HttpResponse httpResponse = httpClient.execute(httpPost);				HttpEntity httpEntity = httpResponse.getEntity();				line = EntityUtils.toString(httpEntity);			} catch (UnsupportedEncodingException e) {				line = "";			} catch (MalformedURLException e) {				line = "";			} catch (IOException e) {				//	System.out.println("hello2 "+e.getMessage());				line = "";			}			return line;		}		else		{		//	Toast.makeText(context, "No Internet", 5000).show();			return "";		}	}	static NodeList nl=null;	public static ArrayList<Categories> getCategories(String response) {		// TODO Auto-generated method stub		//{"id":"3","name":"Social","description":"","image":""}		ArrayList<Categories>categories=new ArrayList<Categories>();		try {			JSONArray jsonArray=new JSONArray(response);			for (int i = 0; i < jsonArray.length(); i++) {				Categories category=new Categories();				JSONObject jsonObject=jsonArray.getJSONObject(i);				if(jsonObject.has("id"))				category.catId=jsonObject.getString("id");				//	category.name=jsonObject.getString("name");				//	category.description=jsonObject.getString("description");								if(jsonObject.has("image"))					category.image=jsonObject.getString("image");				categories.add(category);			}		} catch (Exception e) {			// TODO: handle exception		}		return categories;	}	public static ArrayList<CountryData> getCountry(String response) {		// TODO Auto-generated method stub		//{"id":"3","name":"Social","description":"","image":""}		ArrayList<CountryData>categories=new ArrayList<CountryData>();		try {			JSONArray jsonArray=new JSONArray(response);			for (int i = 0; i < jsonArray.length(); i++) {				JSONObject jsonObject=jsonArray.getJSONObject(i);				CountryData data=new CountryData();				data.country_id=jsonObject.getString("country_id");				data.country_name=jsonObject.getString("country_name");				categories.add(data);			}		} catch (Exception e) {			// TODO: handle exception		}		return categories;	}	public static ArrayList<ZoneData> getZones(String response) {		// TODO Auto-generated method stub		//{"id":"3","name":"Social","description":"","image":""}		ArrayList<ZoneData>categories=new ArrayList<ZoneData>();		try {			JSONArray jsonArray=new JSONArray(response);			for (int i = 0; i < jsonArray.length(); i++) {				JSONObject jsonObject=jsonArray.getJSONObject(i);				ZoneData data=new ZoneData();				data.zone_id=jsonObject.getString("zone_id");				data.zone_name=jsonObject.getString("zone_name");				categories.add(data);			}		} catch (Exception e) {			// TODO: handle exception		}		return categories;	}	public static String Login(String url,String url2,Context context){		String line = "";		String result="";		url2=url2.replace(" ", "%20");		url=url.replace(" ", "%20");		if(Utility.isOnline(context))		{			try {				HttpParams httpParameters = new BasicHttpParams();				HttpConnectionParams.setConnectionTimeout(httpParameters, 10000);				HttpConnectionParams.setSoTimeout(httpParameters, 10000);				DefaultHttpClient httpClient = new DefaultHttpClient(httpParameters);				HttpPost httpPost = new HttpPost(url);				HttpResponse httpResponse = httpClient.execute(httpPost);				HttpEntity httpEntity = httpResponse.getEntity();				line = EntityUtils.toString(httpEntity);				httpPost = new HttpPost(url2);				httpResponse = httpClient.execute(httpPost);				httpEntity = httpResponse.getEntity();				line = EntityUtils.toString(httpEntity);				try {					JSONObject jsonObj=new JSONObject(line);					if(jsonObj.has("status"))						result=jsonObj.getString("status");					else if(jsonObj.has("order id"))						result=jsonObj.getString("order id");					else if(jsonObj.has("profile_picture"))						result=jsonObj.getString("profile_picture");					else if(jsonObj.has("Rank"))						result=jsonObj.getString("Rank");					else if(jsonObj.has("bg_picture"))						result =jsonObj.getString("bg_picture");				} catch (Exception e) {					// TODO: handle exception				}				return result;			} catch (UnsupportedEncodingException e) {				result = "";			} catch (MalformedURLException e) {				result = "";			} catch (IOException e) {				//    System.out.println("hello2 "+e.getMessage());				result = "";			}			System.out.println(result);			return result;		}		else		{			Utility.Alert("No Internet",context);			return "";		}	}	public static String paypalSuccess(Context context,String username,String password){		String line = "";		String result="";		if(Utility.isOnline(context))		{			try {				String url=(URLS.LOGIN_URL+username+"&password="+password);				String url2=(URLS.SUBSCRIPTION);				HttpParams httpParameters = new BasicHttpParams();				HttpConnectionParams.setConnectionTimeout(httpParameters, 10000);				HttpConnectionParams.setSoTimeout(httpParameters, 10000);				DefaultHttpClient httpClient = new DefaultHttpClient(httpParameters);				HttpPost httpPost = new HttpPost(url);				HttpResponse httpResponse = httpClient.execute(httpPost);				HttpEntity httpEntity = httpResponse.getEntity();				line = EntityUtils.toString(httpEntity);				httpPost = new HttpPost(url2);				httpResponse = httpClient.execute(httpPost);				httpEntity = httpResponse.getEntity();				line = EntityUtils.toString(httpEntity);				try {					JSONObject jsonArray=new JSONObject(line);					result=jsonArray.getString("status");					Log.i("STATUS ",result);				} catch (Exception e) {					// TODO: handle exception				}				return result;			} catch (UnsupportedEncodingException e) {				result = "";			} catch (MalformedURLException e) {				result = "";			} catch (IOException e) {				//    System.out.println("hello2 "+e.getMessage());				result = "";			}			return result;		}		else		{			Utility.Alert("No Internet",context);			return "";		}	}	public static String register(String reesponse)	{		String result="";		try {			JSONObject jsonObject=new JSONObject(reesponse);			result=jsonObject.getString("status");		} catch (Exception e) {			// TODO: handle exception		}		return result;	}	public static ArrayList<SubCategories> getSubCategories(String response,String catId) {		// TODO Auto-generated method stub		//{"id":"3","name":"Social","description":"","image":""}		ArrayList<SubCategories>categories=new ArrayList<SubCategories>();		try {			JSONArray jsonArray=new JSONArray(response);			ArrayList<Bitmap> bitmaps=new ArrayList<Bitmap>();			ArrayList<String> urls=new ArrayList<String>();			for (int i = 0; i < jsonArray.length(); i++) {				SubCategories category=new SubCategories();				JSONObject jsonObject=jsonArray.getJSONObject(i);				category.subcatId=jsonObject.getString("id");				category.name=jsonObject.getString("name");				category.description=jsonObject.getString("description");				category.image=jsonObject.getString("image");				if(!category.image.equals(""))				{				//	bitmaps.add(Utility.downloadBitmap(URLS.TEMP_IMG_URL+category.image));					urls.add(URLS.TEMP_IMG_URL+category.image);					System.out.println(URLS.TEMP_IMG_URL+category.image);					if(catId.equals("1"))						Utility.setNewscatlist(urls);					else if(catId.equals("2"))						Utility.setMediacatlist(urls);					else if(catId.equals("3"))						Utility.setSocialcatlist(urls);					else if(catId.equals("4"))						Utility.setShopcatlist(urls);				}				categories.add(category);			}		} catch (Exception e) {			// TODO: handle exception		}		return categories;	}	public static ArrayList<FolderDetails> getFoldeImages(String response) {		// TODO Auto-generated method stub		//{"id":"3","name":"Social","description":"","image":""}		ArrayList<FolderDetails>categories=new ArrayList<FolderDetails>();		try {			JSONArray jsonArray=new JSONArray(response);			ArrayList<Bitmap> bitmaps=new ArrayList<Bitmap>();			for (int i = 0; i < jsonArray.length(); i++) {				FolderDetails category=new FolderDetails();				JSONObject jsonObject=jsonArray.getJSONObject(i);				category.folderImgId=jsonObject.getString("id");				category.title=jsonObject.getString("title");				category.description=jsonObject.getString("description");				JSONArray jsonArray2=jsonObject.getJSONArray("src");				category.src=new String[jsonArray2.length()];				for (int j = 0; j < jsonArray2.length(); j++) {					category.src[j]=URLS.MEDIA_FOLDER_IMAGE_URL+category.folderImgId+"/"+jsonArray2.getString(j);					System.out.println(category.src[j]);				}				categories.add(category);			}		} catch (Exception e) {			// TODO: handle exception		}		return categories;	}	public static ArrayList<FanData> getFanImages(String response) {		// TODO Auto-generated method stub		//{"id":"3","name":"Social","description":"","image":""}		ArrayList<FanData>fans=new ArrayList<FanData>();		try {			JSONArray jsonArray=new JSONArray(response);			for (int i = 0; i < jsonArray.length(); i++) {				FanData fan=new FanData();				JSONObject jsonObject=jsonArray.getJSONObject(i);				fan.id=jsonObject.getString("id");				fan.user_id=jsonObject.getString("user_id");				fan.username=jsonObject.getString("username");				fan.stars=jsonObject.getString("stars");				fan.profile_picture= URLS.USERS_IMAGE+jsonObject.getString("profile_picture");				fans.add(fan);			}		} catch (Exception e) {			// TODO: handle exception		}		return fans;	}	public static ArrayList<Comments> getComments(String response) {		// TODO Auto-generated method stub		//{"id":"3","name":"Social","description":"","image":""}		ArrayList<Comments>comments=new ArrayList<Comments>();		try {			JSONObject jsonObj=new JSONObject(response);			JSONArray commentsArray=jsonObj.getJSONArray("Comments");			for (int i = 0; i < commentsArray.length(); i++) {				Comments comment=new Comments();				JSONObject tempObject=commentsArray.getJSONObject(i);				if(tempObject.has("id"))					comment.id=tempObject.getString("id");				if(tempObject.has("commentDate"))					comment.commentDate=tempObject.getString("commentDate");				if(tempObject.has("commentText"))					comment.commentText=tempObject.getString("commentText");				if(tempObject.has("userName"))					comment.userName=tempObject.getString("userName");				comments.add(comment);			}		} catch (Exception e) {			// TODO: handle exception		}		return comments;	}	public static ArrayList<NewsData> getNewsUpdates(String response) {		// TODO Auto-generated method stub		//{"id":"3","name":"Social","description":"","image":""}		ArrayList<NewsData>categories=new ArrayList<NewsData>();		try {			JSONArray jsonArray=new JSONArray(response);			Utility.newsImageUrls=new String[jsonArray.length()];			for (int i = 0; i < jsonArray.length(); i++) {				NewsData news=new NewsData();				JSONObject jsonObject=jsonArray.getJSONObject(i);				if(jsonObject.has("id"))					news.id=jsonObject.getString("id");				if(jsonObject.has("title"))					news.title=jsonObject.getString("title");				if(jsonObject.has("thumbnail"))					news.thumbnail=jsonObject.getString("thumbnail");				news.thumbnail.replaceAll("\\/","");				if(!(news.thumbnail.equals("")||news.thumbnail.equals("no thumbnail)")))				{					Utility.newsImageUrls[i]=((URLS.TEMP_ITEMS_IMG_URL+news.thumbnail));					//Utility.setsubCategoryBitmaps(bitmaps);				}				news.addonData=new AddonData();				if(jsonObject.has("no_of_views")&&(!jsonObject.getString("no_of_views").equals("null")))					news.addonData.no_of_views=jsonObject.getInt("no_of_views");				if(jsonObject.has("no_of_comments")&&(!jsonObject.getString("no_of_comments").equals("null")))					news.addonData.no_of_comments=jsonObject.getInt("no_of_comments");				if(jsonObject.has("created_date")&&(!jsonObject.getString("created_date").equals("null")))					news.addonData.created_date=jsonObject.getString("created_date");				System.out.println(news.addonData.created_date+":"+news.addonData.no_of_comments+"::"+news.addonData.no_of_views);				categories.add(news);			}		} catch (Exception e) {			// TODO: handle exception			System.out.println("HELLO:::::"+e.getMessage());		}		return categories;	}	public static Details getDataDetails(String response)	{		Details details=new Details();		try {			JSONArray jsonArray=new JSONArray(response);			/*			 * [{"id":"1","title":"test items","description":"","type":null,"src":null,			 * "thumbnail":"\/images\/sampledata\/fruitshop\/Neelofa2.jpg","created":"2013-10-22 18:06:00","item_image":			 * "2fa67f482133f1c934235b73c2a03954_M.jpg"}]*/			JSONObject jsonObject=jsonArray.getJSONObject(0);			if(jsonObject.has("id"))				details.id=jsonObject.getString("id");			if(jsonObject.has("title"))				details.title=jsonObject.getString("title");			if(jsonObject.has("description"))				details.description=jsonObject.getString("description");			if(jsonObject.has("type"))				details.type=jsonObject.getString("type");			if(jsonObject.has("src"))				details.src=jsonObject.getString("src");			if(jsonObject.has("thumbnail"))				details.thumbnail=jsonObject.getString("thumbnail");			if(jsonObject.has("item_image"))				details.item_image=jsonObject.getString("item_image");			if(jsonObject.has("created"))				details.created=jsonObject.getString("created");		} catch (Exception e) {			// TODO: handle exception		}		return details;	}	public static ArrayList<String>getLoginImagesUrl(String response)	{		ArrayList<String>imgUrls=new ArrayList<String>();		try {			JSONObject mainObj=new JSONObject(response);			JSONArray jsonArray=mainObj.getJSONArray("Images");			for (int i = 0; i < jsonArray.length(); i++) {				imgUrls.add(jsonArray.getString(i));			}		} catch (Exception e) {			// TODO: handle exception		}		return imgUrls;	}	public static ArrayList<MediaData> getMediaUpdates(String response) {		// TODO Auto-generated method stub		//{"id":"3","name":"Social","description":"","image":""}		ArrayList<MediaData>categories=new ArrayList<MediaData>();		try {			JSONArray jsonArray=new JSONArray(response);			Utility.mediaImageUrls=new String[jsonArray.length()];			ArrayList<Bitmap> bitmaps=new ArrayList<Bitmap>();			for (int i = 0; i < jsonArray.length(); i++) {				MediaData media=new MediaData();				JSONObject jsonObject=jsonArray.getJSONObject(i);				if(jsonObject.has("id"))					media.id=jsonObject.getString("id");				if(jsonObject.has("title"))					media.title=jsonObject.getString("title");				if(jsonObject.has("thumbnail"))					media.thumbnail=jsonObject.getString("thumbnail");				media.thumbnail.replaceAll("\\/","");				System.out.println(media.thumbnail);				if(!(media.thumbnail.equals("")||media.thumbnail.equals("no thumbnail)")))				{					Utility.mediaImageUrls[i]=((URLS.TEMP_ITEMS_IMG_URL+media.thumbnail));					//Utility.setsubCategoryBitmaps(bitmaps);				}				media.addonData=new AddonData();				if(jsonObject.has("no_of_views")&&(!jsonObject.getString("no_of_views").equals("null")))					media.addonData.no_of_views=jsonObject.getInt("no_of_views");				if(jsonObject.has("no_of_comments")&&(!jsonObject.getString("no_of_comments").equals("null")))					media.addonData.no_of_comments=jsonObject.getInt("no_of_comments");				if(jsonObject.has("created_date")&&(!jsonObject.getString("created_date").equals("null")))					media.addonData.created_date=jsonObject.getString("created_date");				categories.add(media);			}		} catch (Exception e) {			// TODO: handle exception		}		return categories;	}	public static ArrayList<ShoppingData> getShoppingDetails(String response) {		// TODO Auto-generated method stub		//{"id":"3","name":"Social","description":"","image":""}		ArrayList<ShoppingData>categories=new ArrayList<ShoppingData>();		try {			JSONArray jsonArray=new JSONArray(response);			Utility.mediaImageUrls=new String[jsonArray.length()];			ArrayList<Bitmap> bitmaps=new ArrayList<Bitmap>();			for (int i = 0; i < jsonArray.length(); i++) {				ShoppingData media=new ShoppingData();				JSONObject jsonObject=jsonArray.getJSONObject(i);				if(jsonObject.has("id"))					media.id=jsonObject.getString("id");				if(jsonObject.has("title"))					media.title=jsonObject.getString("title");				if(jsonObject.has("item_image"))					media.item_image=jsonObject.getString("item_image");				media.item_image.replaceAll("\\/","");				if(jsonObject.has("item_minimum"))					media.item_minimum=jsonObject.getString("item_minimum");				if(jsonObject.has("item_sku"))					media.item_sku=jsonObject.getString("item_sku");				if(jsonObject.has("special_price"))					media.special_price=jsonObject.getString("special_price");				if(jsonObject.has("price"))					media.item_price=jsonObject.getString("item_price");				categories.add(media);			}		} catch (Exception e) {			// TODO: handle exception		}		return categories;	}	public static ArrayList<ShoppingData> getShoppingUpdates(String response) {		// TODO Auto-generated method stub		//{"id":"3","name":"Social","description":"","image":""}		ArrayList<ShoppingData>categories=new ArrayList<ShoppingData>();		try {			JSONArray jsonArray=new JSONArray(response);			Utility.mediaImageUrls=new String[jsonArray.length()];			ArrayList<Bitmap> bitmaps=new ArrayList<Bitmap>();			for (int i = 0; i < jsonArray.length(); i++) {				ShoppingData media=new ShoppingData();				JSONObject jsonObject=jsonArray.getJSONObject(i);				if(jsonObject.has("id"))					media.id=jsonObject.getString("id");				if(jsonObject.has("title"))					media.title=jsonObject.getString("title");				media.item_image.replaceAll("\\/","");			//	System.out.println(media.thumbnail);				if(!(media.item_image.equals("")||media.item_image.equals("no thumbnail)")))				{					Utility.mediaImageUrls[i]=((URLS.TEMP_ITEMS_IMG_URL+media.item_image));					//Utility.setsubCategoryBitmaps(bitmaps);				}				media.addonData=new AddonData();				if(jsonObject.has("no_of_views")&&(!jsonObject.getString("no_of_views").equals("null")))					media.addonData.no_of_views=jsonObject.getInt("no_of_views");				if(jsonObject.has("no_of_comments")&&(!jsonObject.getString("no_of_comments").equals("null")))					media.addonData.no_of_comments=jsonObject.getInt("no_of_comments");				if(jsonObject.has("created_date")&&(!jsonObject.getString("created_date").equals("null")))					media.addonData.created_date=jsonObject.getString("created_date");				if(jsonObject.has("price")&&(!jsonObject.getString("price").equals("null")))					media.item_price=jsonObject.getString("price");								categories.add(media);			}		} catch (Exception e) {			// TODO: handle exception		}		return categories;	}	public static String getAddress(String response)	{		String adderess="";		try {			JSONObject jsonObject=new JSONObject(response);			JSONArray jsonArray=jsonObject.getJSONArray("results");				JSONObject muyobj=jsonArray.getJSONObject(0);			adderess=muyobj.getString("formatted_address");		} catch (Exception e) {			// TODO: handle exception		}		return adderess;	}	public static String getValue(Element item, String str) {		NodeList n = item.getElementsByTagName(str);		if(n.item(0)!=null)			return getElementValue(n.item(0));		return "";	}	public static  String getElementValue( Node elem ) {		Node child;		if( elem != null){			if (elem.hasChildNodes()){				for( child = elem.getFirstChild(); child != null; child = child.getNextSibling() ){					if( child.getNodeType() == Node.TEXT_NODE  ){						if(child.getNodeValue()!=null)							return child.getNodeValue();					}				}			}		}		return "";	} 	public static Document XMLfromString(String xml){		Document doc = null;		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();		try {			DocumentBuilder db = dbf.newDocumentBuilder();			InputSource is = new InputSource();			is.setCharacterStream(new StringReader(xml));			doc = db.parse(is); 		} catch (ParserConfigurationException e) {			System.out.println("XML parse error: " + e.getMessage());			return null;		} catch (SAXException e) {			System.out.println("Wrong XML file structure: " + e.getMessage());			return null;		} catch (IOException e) {			System.out.println("I/O exeption: " + e.getMessage());			return null;		}		return doc;	}	public static int isLogin(String string,Context context) {		// TODO Auto-generated method stub		int loginStatus=0 ;		String response=string;		try {			JSONObject jsonObject=new JSONObject(response);			String status=jsonObject.getString("status");			if(jsonObject.has("fullname"))				Utility.setUSER_NAME(jsonObject.getString("fullname"), context);			if(status.equals("1"))			{				loginStatus= 1;			}			else if(status.equals("User is not activated"))			{				loginStatus=3;			}			else if(status.equals("User not subscribed"))			{				loginStatus= 2;			}			else if(status.equalsIgnoreCase("Change Password"))			{				loginStatus= 4;			}		} catch (Exception e) {			// TODO: handle exception			System.out.println(e.getMessage());		}		return loginStatus;	}}